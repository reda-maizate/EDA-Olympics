version: '3.8'

services:
# x-airflow-common:
#   &airflow-common
#   # In order to add custom dependencies or upgrade provider packages you can use your extended image.
#   # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
#   # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
#   # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:|version|}
#   image: apache/airflow
#   # build: .
#   environment:
#     &airflow-common-env
#     AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#     AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
#     # For backward compatibility, with Airflow <2.3
#     AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
#     AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
#     AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
#     AIRFLOW__CORE__FERNET_KEY: ''
#     AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#     AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
#     AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
#     _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
#   volumes:
#     - ./airflow/dags:/opt/airflow/dags
#     - ./airflow/logs:/opt/airflow/logs
#     - ./airflow/plugins:/opt/airflow/plugins
#   user: "${AIRFLOW_UID:-50000}:0"
#   depends_on:
#     &airflow-common-depends-on
#     redis:
#       condition: service_healthy
#     postgres:
#       condition: service_healthy

# services:
#   postgres:
#     image: postgres:13
#     environment:
#       POSTGRES_USER: airflow
#       POSTGRES_PASSWORD: airflow
#       POSTGRES_DB: airflow
#     volumes:
#       - postgres-db-volume:/var/lib/postgresql/data
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "airflow"]
#       interval: 5s
#       retries: 5
#     restart: always

#   redis:
#     image: redis:latest
#     expose:
#       - 6379
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 5s
#       timeout: 30s
#       retries: 50
#     restart: always

#   airflow-webserver:
#     <<: *airflow-common
#     command: webserver
#     ports:
#       - 8080:8080
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
#       interval: 10s
#       timeout: 10s
#       retries: 5
#     restart: always
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-scheduler:
#     <<: *airflow-common
#     command: scheduler
#     healthcheck:
#       test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
#       interval: 10s
#       timeout: 10s
#       retries: 5
#     restart: always
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-worker:
#     <<: *airflow-common
#     command: celery worker
#     healthcheck:
#       test:
#         - "CMD-SHELL"
#         - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
#       interval: 10s
#       timeout: 10s
#       retries: 5
#     environment:
#       <<: *airflow-common-env
#       # Required to handle warm shutdown of the celery workers properly
#       # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
#       DUMB_INIT_SETSID: "0"
#     restart: always
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-triggerer:
#     <<: *airflow-common
#     command: triggerer
#     healthcheck:
#       test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
#       interval: 10s
#       timeout: 10s
#       retries: 5
#     restart: always
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

#   airflow-init:
#     <<: *airflow-common
#     entrypoint: /bin/bash
#     # yamllint disable rule:line-length
#     # command:
#     #   - version
#     environment:
#       <<: *airflow-common-env
#       _AIRFLOW_DB_UPGRADE: 'true'
#       _AIRFLOW_WWW_USER_CREATE: 'true'
#       _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
#       _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
#       _PIP_ADDITIONAL_REQUIREMENTS: ''
#     user: "0:0"
#     volumes:
#       - .:/sources

#   airflow-cli:
#     <<: *airflow-common
#     profiles:
#       - debug
#     environment:
#       <<: *airflow-common-env
#       CONNECTION_CHECK_MAX_COUNT: "0"
#     # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
#     command:
#       - bash
#       - -c
#       - airflow

#   # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
#   # or by explicitly targeted on the command line e.g. docker-compose up flower.
#   # See: https://docs.docker.com/compose/profiles/
#   flower:
#     <<: *airflow-common
#     command: celery flower
#     profiles:
#       - flower
#     ports:
#       - 5555:5555
#     healthcheck:
#       test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
#       interval: 10s
#       timeout: 10s
#       retries: 5
#     restart: always
#     depends_on:
#       <<: *airflow-common-depends-on
#       airflow-init:
#         condition: service_completed_successfully

  ##################
  ### KAFKA CONF ###
  ##################

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "processed:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  init-kafka:
    image: drewpc/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9093 --create --if-not-exists --topic athletes --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9093 --create --if-not-exists --topic hosts --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9093 --create --if-not-exists --topic medals --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9093 --list
      "

volumes:
  postgres-db-volume: